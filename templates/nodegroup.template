{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation sub-template for Auto-scaling group deployment",
    "Parameters": {
        "AssumeRole": {
            "Type": "String",
            "Description": "Optional IAM role ARN to assume to get the IAM users from another account",
            "Default": ""
        },
        "AuthorizedIamGroups" : {
            "Default": "",
            "Description": "Comma separate IAM groups whose users will be given SSH access.",
            "Type": "String"
        },
        "AuthorizedSudoerGroups" : {
            "Default": "",
            "Description": "Comma separated IAM groups whose users will be given sudo access.",
            "Type": "String"
        },
        "DatadogApiKey": {
            "Description": "API Key required to authenticate with Datadog.",
            "Type": "String"
        },
        "ConsulVersion": {
            "Default": "0.8.1",
            "Description": "Version of Consul to deploy",
            "Type": "String"
        },
        "ConsulServerStack": {
            "Description": "The ARN ID for the Cloudformation stack that created the consul servers",
            "Type": "String"
        },
        "ConsulQSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "ConsulQSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "hashicorp/consul/latest/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "AssignPublicIP": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "Either true or false",
            "Default": "true",
            "Description": "Allociate a public IP address to each instance",
            "Type": "String"
        },
        "BootDiskSize": {
            "ConstraintDescription": "Deployment supports 8 to 128 GB for boot volumes",
            "Default": "24",
            "Description": "Allocated EBS storage for boot disk",
            "MaxValue": "128",
            "MinValue": "8",
            "Type": "Number"
        },
        "ClusterInfoHandle": {
            "Description": "",
            "Type": "String"
        },
        "ClusterName": {
            "AllowedPattern": "([A-Za-z]{1}[0-9A-Za-z_-]*)",
            "ConstraintDescription": "The ClusterName value must be alphanumeric",
            "Default": "awsmk",
            "Description": "Confluent Cluster ID",
            "Type": "String"
        },
        "ConfluentEdition": {
            "AllowedValues": [
                "Confluent Open Source",
                "Confluent Enterprise"
            ],
            "Default": "Confluent Enterprise",
            "Description": "Confluent Software Edition",
            "Type": "String"
        },
        "ConfluentSecurity": {
            "AllowedValues": [
                "Disabled",
                "Enabled"
            ],
            "Default": "Disabled",
            "Description": "Enable strong authentication for cluster access",
            "Type": "String"
        },
        "ConfluentVersion": {
            "ConstraintDescription": "Supported versions of Confluent Platform within AWS Marketplace",
            "Default": "3.3.1",
            "Description": "Confluent Software Version",
            "Type": "String"
        },
        "ConnectorURLs": {
            "Default": "",
            "Description": "Public locations (comma-separated list) from which to download additional Kafka Connect jars (eg https://s3.amazonaws.com/connector-bucket/dynamo)",
            "Type": "String"
        },
        "InstanceProfile": {
            "Description": "IAM Profile for the deployment",
            "Type": "String"
        },
        "InstanceRole": {
            "Description": "IAM Role for the deployment. The EC2 instances must be able to access this role using the instance profile.",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Name of an existing EC2 key pair within the AWS region; all instances will launch with this key pair",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "LinuxOSAMI": {
            "AllowedValues": [
                "CentOS-7-HVM",
                "Ubuntu-Server-16.04-LTS-HVM",
                "Amazon-Linux-HVM"
            ],
            "ConstraintDescription": "Supported versions of Linux AMIs for Confluent deployments",
            "Default": "Ubuntu-Server-16.04-LTS-HVM",
            "Description": "Operating system AMI for cluster instances",
            "Type": "String"
        },
        "NodeDesignation": {
            "Default": "unspecified",
            "Description": "Tag for deployed instances",
            "Type": "String"
        },
        "NodeInstanceType": {
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "i2.xlarge",
                "i2.2xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type.",
            "Default": "d2.xlarge",
            "Description": "Instance Type",
            "Type": "String"
        },
        "NodeSecurityGroup": {
            "Description": "Comma separated list of security groups for the members of the cluster (e.g. sg-7f16e910,sg-4be93ca2); The security groups must be in the same VPC as the subnets",
            "Type": "List<AWS::EC2::SecurityGroup::Id>"
        },
        "NodeSpotPrice": {
            "AllowedPattern": "([0-9]{1}[.]{1}[0-9]{2})",
            "ConstraintDescription": "Must be decimal numeric value",
            "Default": "0.00",
            "Description": "Spot Price to bid for requested instances (0.00 will result in using on-demand instances)",
            "Type": "String"
        },
        "NumNodes": {
            "Default": "3",
            "Description": "Number of Nodes in Auto-scaling Group",
            "MaxValue": "9",
            "MinValue": "1",
            "Type": "Number"
        },
        "ParentStackName": {
            "Description": "Wrapper stack for this deployment",
            "Type": "String"
        },
        "PersistentStorage": {
            "ConstraintDescription": "No more than 4000 GiB per device (16 TB per node).",
            "Default": "0",
            "Description": "Allocated EBS storage for each block device (in GiB; 4 devs per node); 0 indicates ephemeral storage only",
            "MaxValue": "4000",
            "MinValue": "0",
            "Type": "Number"
        },
        "PersistentStorageType": {
            "AllowedValues": [
                "",
                "gp2",
                "sc1",
                "st1"
            ],
            "Default": "",
            "Description": "EBS volume type (blank indicates default type for ami/region).  sc1 and st1 volumes must be at least 500 GiB in size.",
            "Type": "String"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "confluent/kafka/latest/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "SubnetID": {
            "Description": "Comma separated list of VPC subnet IDs for the cluster deployment (e.g. subnet-4b8d329f,subnet-bd73afc8); VPC must exist with proper configuration for Confluent cluster access (internal and external)and the subnets must be in the same VPC as the security groups",
            "Type": "List<AWS::EC2::Subnet::Id>"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AMZNLINUXHVM": "amzn-ami-hvm-2017.09.1.20180108-x86_64-gp2",
                "CENTOS7HVM": "CentOS Linux 7 x86_64 HVM EBS 1708_11.01-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-95096eef.4",
                "US1604HVM": "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180109"
            },
            "ap-northeast-1": {
                "AMZNLINUXHVM": "ami-33c25b55",
                "CENTOS7HVM": "ami-4dd5522b",
                "US1604HVM": "ami-d39a02b5"
            },
            "ap-northeast-2": {
                "AMZNLINUXHVM": "ami-d9b616b7",
                "CENTOS7HVM": "ami-53a1073d",
                "US1604HVM": "ami-67973709"
            },
            "ap-south-1": {
                "AMZNLINUXHVM": "ami-fedb8f91",
                "CENTOS7HVM": "ami-82a3eaed",
                "US1604HVM": "ami-5d055232"
            },
            "ap-southeast-1": {
                "AMZNLINUXHVM": "ami-889cecf4",
                "CENTOS7HVM": "ami-a6e88dda",
                "US1604HVM": "ami-325d2e4e"
            },
            "ap-southeast-2": {
                "AMZNLINUXHVM": "ami-ccab56ae",
                "CENTOS7HVM": "ami-5b778339",
                "US1604HVM": "ami-37df2255"
            },
            "ca-central-1": {
                "AMZNLINUXHVM": "ami-61f97c05",
                "CENTOS7HVM": "ami-b111aad5",
                "US1604HVM": "ami-f0870294"
            },
            "eu-central-1": {
                "AMZNLINUXHVM": "ami-0fc85a60",
                "CENTOS7HVM": "ami-1e038d71",
                "US1604HVM": "ami-af79ebc0"
            },
            "eu-west-1": {
                "AMZNLINUXHVM": "ami-e487179d",
                "CENTOS7HVM": "ami-192a9460",
                "US1604HVM": "ami-4d46d534"
            },
            "eu-west-2": {
                "AMZNLINUXHVM": "ami-51809835",
                "CENTOS7HVM": "ami-c8d7c9ac",
                "US1604HVM": "ami-d7aab2b3"
            },
            "sa-east-1": {
                "AMZNLINUXHVM": "ami-1226647e",
                "CENTOS7HVM": "ami-6b5c1b07",
                "US1604HVM": "ami-1157157d"
            },
            "us-east-1": {
                "AMZNLINUXHVM": "ami-cb9ec1b1",
                "CENTOS7HVM": "ami-02e98f78",
                "US1604HVM": "ami-41e0b93b"
            },
            "us-east-2": {
                "AMZNLINUXHVM": "ami-caaf84af",
                "CENTOS7HVM": "ami-e0eac385",
                "US1604HVM": "ami-2581aa40"
            },
            "us-west-1": {
                "AMZNLINUXHVM": "ami-95eeeef5",
                "CENTOS7HVM": "ami-b1a59fd1",
                "US1604HVM": "ami-79aeae19"
            },
            "us-west-2": {
                "AMZNLINUXHVM": "ami-32cf7b4a",
                "CENTOS7HVM": "ami-b63ae0ce",
                "US1604HVM": "ami-1ee65166"
            }
        },
        "LinuxAMINameMap": {
            "Amazon-Linux-HVM": {
                "Code": "AMZNLINUXHVM"
            },
            "CentOS-7-HVM": {
                "Code": "CENTOS7HVM"
            },
            "Ubuntu-Server-16.04-LTS-HVM": {
                "Code": "US1604HVM"
            }
        },
        "Linux2BootDisk": {
            "Amazon-Linux-HVM": {
                "BootDisk": "/dev/xvda"
            },
            "CentOS-7-HVM": {
                "BootDisk": "/dev/sda1"
            },
            "Ubuntu-Server-16.04-LTS-HVM": {
                "BootDisk": "/dev/sda1"
            }
        }
    },
    "Conditions": {
        "BrokerNode": {
            "Fn::Equals": [
                {
                    "Ref": "NodeDesignation"
                },
                "broker"
            ]
        },
        "WorkerNode": {
            "Fn::Equals": [
                {
                    "Ref": "NodeDesignation"
                },
                "worker"
            ]
        },
        "ZookeeperNode": {
            "Fn::Equals": [
                {
                    "Ref": "NodeDesignation"
                },
                "zookeeper"
            ]
        },
        "EphemeralStorage": {
            "Fn::Equals": [
                {
                    "Ref": "PersistentStorage"
                },
                "0"
            ]
        },
        "OnDemandInstances": {
            "Fn::Equals": [
                {
                    "Ref": "NodeSpotPrice"
                },
                "0.00"
            ]
        },
        "UseDefaultVT": {
            "Fn::Equals": [
                {
                    "Ref": "PersistentStorageType"
                },
                ""
            ]
        }
    },
    "Resources": {
        "NodesReadyHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "NodesReadyCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Properties": {
                "Handle": {
                    "Ref": "NodesReadyHandle"
                },
                "Timeout": "2400",
                "Count": {
                    "Ref": "NumNodes"
                }
            }
        },
        "Nodes": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Ref": "SubnetID"
                },
                "LaunchConfigurationName": {
                    "Ref": "NodeLaunchConfig"
                },
                "MinSize": 0,
                "MaxSize": {
                    "Ref": "NumNodes"
                },
                "DesiredCapacity": {
                    "Ref": "NumNodes"
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "NumNodes"
                    },
                    "Timeout": "PT30M"
                }
            }
        },
        "NodeLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "InstanceRole"
                        },
                        "buckets": [
                            {
                                "Ref": "QSS3BucketName"
                            },
                            {
                                "Ref": "ConsulQSS3BucketName"
                            }
                        ]
                    }
                },
                "AWS::CloudFormation::Init": {
                    "config": {
                        "sources" : {
                            "/home/ubuntu" : "http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip",
                            "/etc/consul.d" : { "Fn::Join" : ["",
                                ["https://s3.amazonaws.com/", { "Ref" : "ConsulQSS3BucketName" }, "/", { "Ref" : "ConsulQSS3KeyPrefix"}, "ClientConfig.tar.gz"]] }
                        },
                        "commands": {
                            "a-install": {
                                "command": {
                                    "Fn::Sub": "./install.sh -a \"${AssumeRole}\" -i \"${AuthorizedIamGroups}\" -s \"${AuthorizedSudoerGroups}\""
                                },
                                "cwd": "/opt/aws-ec2-ssh"
                            },
                            "b-consul-services": {
                                "command" : "/tmp/sbin/confluent_services.sh > /var/log/confluent_services.log"
                            },
                            "c-datadog_checks": {
                                "command" : "/tmp/sbin/enable_datadog_checks.sh > /var/log/datadog_checks.log"
                            }
                        },
                        "files": {
                            "/opt/aws-ec2-ssh/install.sh": {
                                "source": "https://raw.githubusercontent.com/onespot/aws-ec2-ssh/onespot-master/install.sh",
                                "mode": "000550",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/sbin/confluent_services.sh" : {
                                "content": { "Fn::Join" : ["", [
                                    "#!/bin/bash\n",
                                    "\n",
                                    "case '", { "Ref" : "NodeDesignation" }, "' in\n",
                                    "    broker)\n",
                                    "        echo '{\"service\": {\"name\": \"cp-kafka\", \"port\": 9092, \"checks\": [{ \"tcp\": \"localhost:9092\", \"interval\": \"10s\", \"timeout\": \"1s\" }] } }' | tee /etc/consul.d/service_kafka.json\n",
                                    "        ;;\n",
                                    "    worker)\n",
                                    "        echo '{\"service\": {\"name\": \"cp-schema-registry\", \"port\": 8081, \"checks\": [{ \"tcp\": \"localhost:8081\", \"interval\": \"10s\", \"timeout\": \"1s\"  }]  } }' | tee /etc/consul.d/service_schema_registry.json\n",
                                    "        echo '{\"service\": {\"name\": \"cp-kafka-rest\", \"port\": 8082, \"checks\": [{ \"tcp\": \"localhost:8082\", \"interval\": \"10s\", \"timeout\": \"1s\"  }]  } }' | tee /etc/consul.d/service_kafka_rest.json\n",
                                    "        echo '{\"service\": {\"name\": \"cp-kafka-connect\", \"port\": 8083, \"checks\": [{ \"tcp\": \"localhost:8083\", \"interval\": \"10s\", \"timeout\": \"1s\"  }]  } }' | tee /etc/consul.d/service_kafka_connect.json\n",
                                    "        ;;\n",
                                    "    zookeeper)\n",
                                    "        echo '{\"service\": {\"name\": \"cp-zookeeper\", \"port\": 2181, \"checks\": [{ \"tcp\": \"localhost:2181\", \"interval\": \"10s\", \"timeout\": \"1s\"  }]  } }' | tee /etc/consul.d/service_zookeeper.json\n",
                                    "        ;;\n",
                                    "esac\n"
                                ]]},
                                "mode": "000700"
                            },
                            "/tmp/sbin/enable_datadog_checks.sh" : {
                                "content": { "Fn::Join" : ["", [
                                    "#!/bin/bash\n",
                                    "\n",
                                    "case '", { "Ref" : "NodeDesignation" }, "' in\n",
                                    "    broker)\n",
                                    "        cp /etc/dd-agent/conf.d/kafka.yaml.example /etc/dd-agent/conf.d/kafka.yaml\n",
                                    "        ;;\n",
                                    "    worker)\n",
                                    "        ;;\n",
                                    "    zookeeper)\n",
                                    "        cp /etc/dd-agent/conf.d/zk.yaml.example /etc/dd-agent/conf.d/zk.yaml\n",
                                    "        ;;\n",
                                    "esac\n"
                                ]]},
                                "mode": "000700"
                            },
                            "/var/spool/cron/crontabs/ubuntu" : {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "*/5 * * * * ~/aws-scripts-mon/mon-put-instance-data.pl --mem-util --from-cron",
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "crontab",
                                "mode": "000600",
                                "owner": "ubuntu"
                            },
                            "/etc/dd-agent/datadog.conf" : {
                                "content" : { "Fn::Join" : ["", [
                                    "[Main]\n",
                                    "\n",
                                    "dd_url: https://app.datadoghq.com\n",
                                    "api_key:", { "Ref" : "DatadogApiKey" }, "\n",
                                    "collect_ec2_tags: yes\n"
                                ]]},
                                "group": "dd-agent",
                                "mode": "000644",
                                "owner": "dd-agent"
                            },
                            "/etc/dd-agent/conf.d/consul.yaml": {
                                "content" : { "Fn::Join" : ["", [
                                    "init_config:\n",
                                    "\n",
                                    "instances:\n",
                                    "   - url: http://localhost:8500\n",
                                    "     ca_bundle_file: '/etc/consul.d/ssl/ca.cert'\n",
                                    "     client_cert_file: '/etc/consul.d/ssl/consul.cert'\n",
                                    "     private_cert_file: '/etc/consul.d/ssl/consul.key'\n",
                                    "     catalog_checks: yes\n",
                                    "     self_leader_check: yes\n",
                                    "     new_leader_checks: no\n",
                                    "     network_latency_checks: yes\n",
                                    "\n"
                                ]]}
                            },
                            "/tmp/sbin/compute-heap-opts": {
                                "source": {
                                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/compute-heap-opts"
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/tmp/sbin/cp-deploy.sh": {
                                "source": {
                                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/cp-deploy.sh"
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/sbin/cp-install.sh": {
                                "source": {
                                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/cp-install.sh"
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/tmp/sbin/cp-retrieve-connect-jars.sh": {
                                "source": {
                                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/cp-retrieve-connect-jars.sh"
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/tmp/sbin/cp-retrieve-scripts.sh": {
                                "source": {
                                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/cp-retrieve-scripts.sh"
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/tmp/sbin/gen-cluster-hosts.sh": {
                                "source": {
                                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/gen-cluster-hosts.sh"
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/tmp/sbin/prep-cp-instance.sh": {
                                "source": {
                                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/prep-cp-instance.sh"
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/tmp/sbin/prepare-disks.sh": {
                                "source": {
                                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/prepare-disks.sh"
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/tmp/sbin/post-cp-info.sh": {
                                "source": {
                                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/post-cp-info.sh"
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/tmp/sbin/wait-for-child-resource.sh": {
                                "source": {
                                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/wait-for-child-resource.sh"
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/tmp/sbin/wait-for-resource.sh": {
                                "source": {
                                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/wait-for-resource.sh"
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            }
                        },
                        "packages" : {
                            "apt" : {
                                "jq" : [],
                                "git" : [],
                                "datadog-agent" : [],
                                "libwww-perl" : [],
                                "libdatetime-perl" : [],
                                "unzip" : []
                            }
                        },
                        "services" : {
                            "sysvinit" : {
                                "datadog-agent" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : [
                                        "/etc/dd-agent/datadog.conf",
                                        "/etc/dd-agent/conf.d/kafka.yaml",
                                        "/etc/dd-agent/conf.d/kafka_consumer.yaml",
                                        "/etc/dd-agent/conf.d/zk.yaml"],
                                    "packages" : { "apt" : ["datadog-agent"] }
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": {
                    "Fn::If": [
                        "EphemeralStorage",
                        [
                            {
                                "DeviceName": {
                                    "Fn::FindInMap": [
                                        "Linux2BootDisk",
                                        {
                                            "Ref": "LinuxOSAMI"
                                        },
                                        "BootDisk"
                                    ]
                                },
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "BootDiskSize"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sdb",
                                "VirtualName": "ephemeral0"
                            },
                            {
                                "DeviceName": "/dev/sdc",
                                "VirtualName": "ephemeral1"
                            },
                            {
                                "DeviceName": "/dev/sdd",
                                "VirtualName": "ephemeral2"
                            },
                            {
                                "DeviceName": "/dev/sde",
                                "VirtualName": "ephemeral3"
                            },
                            {
                                "DeviceName": "/dev/sdf",
                                "VirtualName": "ephemeral4"
                            },
                            {
                                "DeviceName": "/dev/sdg",
                                "VirtualName": "ephemeral5"
                            },
                            {
                                "DeviceName": "/dev/sdh",
                                "VirtualName": "ephemeral6"
                            },
                            {
                                "DeviceName": "/dev/sdi",
                                "VirtualName": "ephemeral7"
                            },
                            {
                                "DeviceName": "/dev/sdj",
                                "VirtualName": "ephemeral8"
                            },
                            {
                                "DeviceName": "/dev/sdk",
                                "VirtualName": "ephemeral9"
                            },
                            {
                                "DeviceName": "/dev/sdl",
                                "VirtualName": "ephemeral10"
                            },
                            {
                                "DeviceName": "/dev/sdm",
                                "VirtualName": "ephemeral11"
                            }
                        ],
                        [
                            {
                                "DeviceName": {
                                    "Fn::FindInMap": [
                                        "Linux2BootDisk",
                                        {
                                            "Ref": "LinuxOSAMI"
                                        },
                                        "BootDisk"
                                    ]
                                },
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "BootDiskSize"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sdb",
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "VolumeType": {
                                        "Fn::If": [
                                            "UseDefaultVT",
                                            {
                                                "Ref": "AWS::NoValue"
                                            },
                                            {
                                                "Ref": "PersistentStorageType"
                                            }
                                        ]
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sdc",
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "VolumeType": {
                                        "Fn::If": [
                                            "UseDefaultVT",
                                            {
                                                "Ref": "AWS::NoValue"
                                            },
                                            {
                                                "Ref": "PersistentStorageType"
                                            }
                                        ]
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sdd",
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "VolumeType": {
                                        "Fn::If": [
                                            "UseDefaultVT",
                                            {
                                                "Ref": "AWS::NoValue"
                                            },
                                            {
                                                "Ref": "PersistentStorageType"
                                            }
                                        ]
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sde",
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "VolumeType": {
                                        "Fn::If": [
                                            "UseDefaultVT",
                                            {
                                                "Ref": "AWS::NoValue"
                                            },
                                            {
                                                "Ref": "PersistentStorageType"
                                            }
                                        ]
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            }
                        ]
                    ]
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "LinuxAMINameMap",
                                {
                                    "Ref": "LinuxOSAMI"
                                },
                                "Code"
                            ]
                        }
                    ]
                },
                "SecurityGroups": {
                    "Ref": "NodeSecurityGroup"
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                },
                "SpotPrice": {
                    "Fn::If": [
                        "OnDemandInstances",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        {
                            "Ref": "NodeSpotPrice"
                        }
                    ]
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "AssociatePublicIpAddress": {
                    "Ref": "AssignPublicIP"
                },
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "\n",
                                "function error_exit\n",
                                "{\n",
                                " cfn-signal -e 1 --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " --resource Nodes\n",
                                " exit 1\n",
                                "}\n",
                                "\n",
                                "PATH=$PATH:/usr/local/bin \n",
                                "\n",
                                "## Install core O/S packages\n",
                                "if [ ! -f /usr/bin/sshpass ] ; then \n",
                                "  [ `which yum` ] && yum install -y sshpass \n",
                                "  [ `which apt-get` ] && apt-get -y install sshpass \n",
                                "fi \n",
                                "\n",
                                "which pip &> /dev/null \n",
                                "if [ $? -ne 0 ] ; then \n",
                                "  [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip)\n",
                                "  [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip\n",
                                "fi \n",
                                "pip install --upgrade pip\n",
                                "pip install awscli --ignore-installed six\n",
                                "\n",
                                "## Install and Update CloudFormation\n",
                                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "\n",
                                "## Signal that the node is up\n",
                                "cfn-signal -e 0 --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " --resource Nodes\n",
                                "\n",
                                "## Install Datadog Agent on the node\n",
                                "DD_API_KEY=",
                                {
                                    "Ref": "DatadogApiKey"
                                },
                                " bash -c \"$(curl -L https://raw.githubusercontent.com/DataDog/dd-agent/master/packaging/datadog-agent/source/install_agent.sh)\"",
                                "\n",
                                "## Save off other cluster details in prep for configuration\n",
                                "echo ",
                                {
                                    "Ref": "ClusterName"
                                },
                                " > /tmp/clustername\n",
                                "echo ",
                                {
                                    "Ref": "ConfluentEdition"
                                },
                                " > /tmp/cedition\n",
                                "echo ",
                                {
                                    "Ref": "ConfluentSecurity"
                                },
                                " > /tmp/csecurity\n",
                                "[ \"",
                                {
                                    "Ref": "ConfluentSecurity"
                                },
                                "\" = 'Disabled' ] && rm /tmp/csecurity\n",
                                "echo ",
                                {
                                    "Ref": "ConfluentVersion"
                                },
                                " > /tmp/cversion\n",
                                "\n",
                                "## Retrieve scripts to deploy Confluent on the instances \n",
                                "##  cfn-init downloads everything \n",
                                "##  and then we're off to the races \n",
                                "cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource NodeLaunchConfig ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "## Prepare Consul for the instance\n",
                                "CONSUL_BOOTSTRAP_FILE=consul_client_bootstrap.sh\n",
                                "CONSUL_BOOTSTRAP=",
                                {
                                    "Fn::Sub": "https://${ConsulQSS3BucketName}.s3.amazonaws.com/${ConsulQSS3KeyPrefix}scripts/"
                                },
                                "${CONSUL_BOOTSTRAP_FILE}",
                                "\n",
                                "echo ${CONSUL_BOOTSTRAP}",
                                "\n",
                                "wget ${CONSUL_BOOTSTRAP}",
                                "\n",
                                "chmod +x ${CONSUL_BOOTSTRAP_FILE}\n",
                                "./${CONSUL_BOOTSTRAP_FILE} ",
                                " --consul_tag_key ",
                                {
                                    "Fn::ImportValue" : {"Fn::Sub" : "${ConsulServerStack}-ConsulEc2RetryTagKey"}
                                },
                                " --consul_tag_value ",
                                {
                                    "Fn::ImportValue" : {"Fn::Sub" : "${ConsulServerStack}-ConsulEc2RetryTagValue"}
                                },
                                " --s3bucket ",
                                {
                                    "Ref": "ConsulQSS3BucketName"
                                },
                                " --s3prefix ",
                                {
                                    "Ref": "ConsulQSS3KeyPrefix"
                                },
                                "\n",
                                "## Finished preparing consul.\n",
                                "AMI_SBIN=/tmp/sbin \n",
                                "\n",
                                "## Prepare the instance \n",
                                "$AMI_SBIN/prep-cp-instance.sh \n",
                                ". $AMI_SBIN/prepare-disks.sh \n",
                                "\n",
                                "## Wait for all nodes to come on-line\n",
                                "$AMI_SBIN/wait-for-child-resource.sh ",
                                {
                                    "Ref": "ParentStackName"
                                },
                                " ZookeeperStack Nodes\n",
                                "$AMI_SBIN/wait-for-child-resource.sh ",
                                {
                                    "Ref": "ParentStackName"
                                },
                                " BrokerStack Nodes\n",
                                "$AMI_SBIN/wait-for-child-resource.sh ",
                                {
                                    "Ref": "ParentStackName"
                                },
                                " WorkerStack Nodes\n",
                                "\n",
                                "## Now find the private IP addresses of all deployed nodes\n",
                                "##   (generating /tmp/cphosts and /tmp/<role> files)\n",
                                "$AMI_SBIN/gen-cluster-hosts.sh ",
                                {
                                    "Ref": "ParentStackName"
                                },
                                "\n",
                                "\n",
                                "## Tag the instance (now that we're sure of launch index)\n",
                                "##   NOTE: ami_launch_index is correct only within a single subnet)\n",
                                "instance_id=$(curl -f http://169.254.169.254/latest/meta-data/instance-id)\n",
                                "ami_launch_index=$(curl -f http://169.254.169.254/latest/meta-data/ami-launch-index)\n",
                                "launch_node=$(grep -w `hostname -s` /tmp/",
                                {
                                    "Ref": "NodeDesignation"
                                },
                                "s | awk '{print $2}')\n",
                                "if [ -n \"$launch_node\" ] ; then\n",
                                "  launch_index=${launch_node#*NODE}\n",
                                "else\n",
                                "  launch_index=${ami_launch_index}\n",
                                "fi\n",
                                "if [ -n \"$instance_id\" ] ; then\n",
                                "  instance_tag=",
                                {
                                    "Ref": "ClusterName"
                                },
                                "-",
                                {
                                    "Ref": "NodeDesignation"
                                },
                                "-${launch_index}\n",
                                "  aws ec2 create-tags",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " --resources $instance_id --tags Key=Name,Value=$instance_tag\n",
                                "fi\n",
                                "## Run the steps to install the software, \n",
                                "## then configure and start the services \n",
                                "$AMI_SBIN/cp-install.sh 2> /tmp/cp-install.err \n",
                                "$AMI_SBIN/cp-deploy.sh 2> /tmp/cp-deploy.err \n",
                                "\n",
                                "CONNECTOR_URLS=",
                                {
                                    "Ref": "ConnectorURLs"
                                },
                                " \n",
                                "if [ -n \"$CONNECTOR_URLS\" ] ; then \n",
                                "  for csrc in ${CONNECTOR_URLS//,/ } ; do \n",
                                "    $AMI_SBIN/cp-retrieve-connect-jars.sh $csrc 2>&1 | tee -a /tmp/cp-retrieve-connect-jars.err \n",
                                "  done \n",
                                "fi\n",
                                "\n",
                                "## [ OPTIONAL ] Open up ssh to allow direct login\n",
                                "#sed -i 's/ChallengeResponseAuthentication .*no$/ChallengeResponseAuthentication yes/' /etc/ssh/sshd_config\n",
                                "#service sshd restart\n",
                                "\n",
                                "## If all went well, signal success (must be done by ALL nodes in group)\n",
                                "cfn-signal -e 0 -r 'Confluent Platform node deployment complete' '",
                                {
                                    "Ref": "NodesReadyHandle"
                                },
                                "'\n",
                                "## Restart the datadog service\n",
                                "service datadog-agent restart\n",
                                "\n",
                                "## Wait for all nodes to issue the signal\n",
                                "$AMI_SBIN/wait-for-resource.sh NodesReadyCondition \n",
                                "\n",
                                "## Signal back information for outputs (now that all nodes are up) \n",
                                "$AMI_SBIN/post-cp-info.sh '",
                                {
                                    "Ref": "ClusterInfoHandle"
                                },
                                "'\n",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        }
    },
    "Outputs": {
        "Nodes": {
            "Description": "The autoscaling group for the nodes.",
            "Value": {
                "Ref" : "Nodes"
            },
            "Export": {
                "Name" : {"Fn::Sub": "${AWS::StackName}-Nodes" }
            }
        }
    }
}